

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>chaneesong's blog</title>
  <subtitle></subtitle>
  <updated>2023-02-26T17:15:58+09:00</updated>
  <author>
    <name>chaneesong</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 chaneesong </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Swap Nodes in Pairs</title>
    <link href="http://localhost:4000/posts/swap-nodes-in-pairs/" rel="alternate" type="text/html" title="Swap Nodes in Pairs" />
    <published>2023-02-26T00:00:00+09:00</published>
  
    <updated>2023-02-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/swap-nodes-in-pairs/</id>
    <content src="http://localhost:4000/posts/swap-nodes-in-pairs/" />
    <author>
      <name>chaneesong</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  
    <summary>
      





      24. Swap Nodes in Pairs

문제 설명

연결 리스트가 주어질 때, 모든 두 개의 인접 노드를 스왑하고, 스왑한 노드들의 head를 리턴하라.

이 문제는 리스트 노드의 values를 바꾸지 않고 해결해야 한다(node 자체를 바꿔야 한다.).

해결 방법

재귀를 이용해 해결한다.


  재귀의 종료 조건은 연결리스트의 끝까지 도달 했을 때이다.
  head.next를 변수 p에저장한다.
  head.next의 값을 recursive return 값으로 변경한다.
  p.next를 head로 변경한다.




풀이 코드

function swapPairs(head: ListNode | null): ListNode | null {
  if (!head || !head.next) retu...
    </summary>
  

  </entry>

  
  <entry>
    <title>Add Two Numbers</title>
    <link href="http://localhost:4000/posts/add-two-numbers/" rel="alternate" type="text/html" title="Add Two Numbers" />
    <published>2023-02-25T00:00:00+09:00</published>
  
    <updated>2023-02-25T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/add-two-numbers/</id>
    <content src="http://localhost:4000/posts/add-two-numbers/" />
    <author>
      <name>chaneesong</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  
    <summary>
      





      2. Add Two Numbers

문제 설명

자연수로 나타내고 비어있지 않은 두 개의 연결 리스트가 주어진다. 숫자는 역순으로 저장되어 있고, 각각의 노드에는 한 자리 숫자가 들어있다.
두 개의 숫자를 더한 연결 리스트를 반환하라.

두 숫자에는 필요한 0을 제외하고, 선행하는 0이 포함되어 있지 않다고 가정한다(가장 앞에 0은 없다).

해결 방법

역순으로 연결되어 있기 때문에 자연스럽게 우리가 손으로 계산하는 것처럼 하면 된다.


  올림 값을 더한다.
  l1이 있으면 더한다.
  l2가 있으면 더한다.
  새로운 리스트를 만들어 더한 값 % 10을 연결한다.
  더한 값 / 10의 몫을 올림 값에 저장한다.
  끝까지 반복한다.


풀이 코드

function addTwoNumbers(l...
    </summary>
  

  </entry>

  
  <entry>
    <title>Reverse Linked List</title>
    <link href="http://localhost:4000/posts/reverse-linked-list/" rel="alternate" type="text/html" title="Reverse Linked List" />
    <published>2023-02-24T00:00:00+09:00</published>
  
    <updated>2023-02-24T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/reverse-linked-list/</id>
    <content src="http://localhost:4000/posts/reverse-linked-list/" />
    <author>
      <name>chaneesong</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  
    <summary>
      





      206. Reverse Linked List

문제 설명

단일 연결 리스트의 head가 주어질 때, 리스트를 뒤집고, 뒤집어진 리스트를 리턴하라.

해결 방법

재귀를 이용하여 리스트를 뒤집는다.


  재귀의 종료 조건 받은 node인자가 null일 때 종료한다(리스트를 끝까지 순회 했을 때).
  현재 리스트의 다음 노드를 저장하고, 이전 노드를 다음 노드로 연결한다.
  재귀 탐색이 종료 될 때까지 반복한다.




풀이 코드

import { ListNode } from '../utils';

export function reverseList(head: ListNode | null): ListNode | null {
  if (!head) return head;
  const reverse =...
    </summary>
  

  </entry>

  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="http://localhost:4000/posts/merge-two-sorted-lists/" rel="alternate" type="text/html" title="Merge Two Sorted Lists" />
    <published>2023-02-23T00:00:00+09:00</published>
  
    <updated>2023-02-24T00:05:54+09:00</updated>
  
    <id>http://localhost:4000/posts/merge-two-sorted-lists/</id>
    <content src="http://localhost:4000/posts/merge-two-sorted-lists/" />
    <author>
      <name>chaneesong</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  
    <summary>
      





      21. Merge Two Sorted Lists

문제 설명

정렬 된 두 개의 연결 리스트 list1과 list2의 head가 주어진다.

두 리스트를 하나로 병합하라. 이 리스트는 두 리스트의 노드를 이어 붙여서 만들어야 한다.

병합된 연결 리스트의 head를 반환하라.

해결 방법

재귀를 활용하여, 두 리스트를 병합한다.
물론 반복문을 통해서 똑같이 해결할 수 있지만 재귀에 비해 반복문은 코드가 더 길어지는 특성이 있다.
하지만 재귀는 반복문에 비해 코드의 흐름을 읽기가 쉽지 않고, 대부분의 상황에서 반복문보다 메모리를 더 많이 사용하므로 상황에 따라 적절히 사용하는 것이 중요하다.


  재귀의 종료 조건은 list1 또는 list2가 없을 때 종료된다.
  list1 &amp;lt; list2일 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Palindrome Linked List</title>
    <link href="http://localhost:4000/posts/pailndrome-linked-list/" rel="alternate" type="text/html" title="Palindrome Linked List" />
    <published>2023-02-22T00:00:00+09:00</published>
  
    <updated>2023-02-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/pailndrome-linked-list/</id>
    <content src="http://localhost:4000/posts/pailndrome-linked-list/" />
    <author>
      <name>chaneesong</name>
    </author>

  
    
    <category term="알고리즘" />
    
  

  
    <summary>
      





      234. Palindrome Linked List

문제 설명

단일 연결리스트의 head가 주어질 때, 팰린드롬이면 true 아니면 false를 리턴하라.

해결 방법

런너 기법을 활용하여 절반의 리스트를 뒤집은 뒤, 팰린드롬을 비교한다.

런너 기법은 리스트의 이동하는 두 개 이상의 포인터가 있을 때 이 포인터들의 이동 길이를 다르게 하는 기법이다.
런너 기법을 사용하면 리스트의 1/2, 1/3 등으로 정확히 등분 하기 쉽다.

해당 문제에서는 런너 기법을 활용하여, 리스트의 절반을 뒤집어 팰린드롬을 비교할 것이다.


  리스트를 1칸 이동하는 slow포인터와 2칸 이동하는 fast포인터를 만들고, 역순을 저장하는 리스트를 만든다.
  fast를 끝까지 이동시키면 slow는 정확히 절반을 이동한...
    </summary>
  

  </entry>

</feed>


